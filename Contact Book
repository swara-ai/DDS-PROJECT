#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILE_NAME "contacts.dat"

// Structure for contact
typedef struct Contact {
    char name[50];
    char phone[20];
    char email[50];
    struct Contact *next;
} Contact;

Contact *head = NULL;

// Function Prototypes
void loadContacts();
void saveContacts();
void addContact();
void displayContacts();
void searchContact();
void updateContact();
void deleteContact();
void freeContacts();

// Helper: Insert alphabetically
void insertSorted(Contact *newNode) {
    if (head == NULL || strcmp(newNode->name, head->name) < 0) {
        newNode->next = head;
        head = newNode;
        return;
    }
    Contact *current = head;
    while (current->next != NULL && strcmp(current->next->name, newNode->name) < 0) {
        current = current->next;
    }
    newNode->next = current->next;
    current->next = newNode;
}

// Load contacts from file
void loadContacts() {
    FILE *fp = fopen(FILE_NAME, "rb");
    if (!fp) return; // No file yet

    Contact temp;
    while (fread(&temp, sizeof(Contact), 1, fp)) {
        Contact *newNode = (Contact *)malloc(sizeof(Contact));
        *newNode = temp;
        newNode->next = NULL;
        insertSorted(newNode);
    }
    fclose(fp);
}

// Save contacts to file
void saveContacts() {
    FILE *fp = fopen(FILE_NAME, "wb");
    if (!fp) {
        printf("Error saving contacts.\n");
        return;
    }
    Contact *current = head;
    while (current) {
        fwrite(current, sizeof(Contact), 1, fp);
        current = current->next;
    }
    fclose(fp);
}

// Add new contact
void addContact() {
    Contact *newNode = (Contact *)malloc(sizeof(Contact));
    printf("Enter Name: ");
    scanf(" %[^\n]", newNode->name);
    printf("Enter Phone: ");
    scanf(" %[^\n]", newNode->phone);
    printf("Enter Email: ");
    scanf(" %[^\n]", newNode->email);
    newNode->next = NULL;

    insertSorted(newNode);
    saveContacts();
    printf("Contact added successfully!\n");
}

// Display all contacts
void displayContacts() {
    if (!head) {
        printf("No contacts found.\n");
        return;
    }
    Contact *current = head;
    printf("\n---- Contact List ----\n");
    while (current) {
        printf("Name : %s\nPhone: %s\nEmail: %s\n\n", current->name, current->phone, current->email);
        current = current->next;
    }
}

// Search contact by name
void searchContact() {
    char name[50];
    printf("Enter name to search: ");
    scanf(" %[^\n]", name);

    Contact *current = head;
    while (current) {
        if (strcasecmp(current->name, name) == 0) {
            printf("Found: %s | %s | %s\n", current->name, current->phone, current->email);
            return;
        }
        current = current->next;
    }
    printf("Contact not found.\n");
}

// Update contact
void updateContact() {
    char name[50];
    printf("Enter name to update: ");
    scanf(" %[^\n]", name);

    Contact *current = head;
    while (current) {
        if (strcasecmp(current->name, name) == 0) {
            printf("Enter new phone: ");
            scanf(" %[^\n]", current->phone);
            printf("Enter new email: ");
            scanf(" %[^\n]", current->email);
            saveContacts();
            printf("Contact updated!\n");
            return;
        }
        current = current->next;
    }
    printf("Contact not found.\n");
}

// Delete contact
void deleteContact() {
    char name[50];
    printf("Enter name to delete: ");
    scanf(" %[^\n]", name);

    Contact *current = head, *prev = NULL;
    while (current) {
        if (strcasecmp(current->name, name) == 0) {
            if (prev == NULL)
                head = current->next;
            else
                prev->next = current->next;

            free(current);
            saveContacts();
            printf("Contact deleted!\n");
            return;
        }
        prev = current;
        current = current->next;
    }
    printf("Contact not found.\n");
}

// Free memory
void freeContacts() {
    Contact *temp;
    while (head) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

// Main Menu
int main() {
    int choice;
    loadContacts();

    do {
        printf("\n---- Contact Book ----\n");
        printf("1. Add Contact\n");
        printf("2. Display Contacts\n");
        printf("3. Search Contact\n");
        printf("4. Update Contact\n");
        printf("5. Delete Contact\n");
        printf("6. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: addContact(); break;
            case 2: displayContacts(); break;
            case 3: searchContact(); break;
            case 4: updateContact(); break;
            case 5: deleteContact(); break;
            case 6: freeContacts(); printf("Goodbye!\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 6);

    return 0;
}
